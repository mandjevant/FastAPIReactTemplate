// This file is auto-generated by @hey-api/openapi-ts

export type Body_login_login_access_token = {
    grant_type?: (string | null);
    username: string;
    password: string;
    scope?: string;
    client_id?: (string | null);
    client_secret?: (string | null);
};

export type HTTPValidationError = {
    detail?: Array<ValidationError>;
};

/**
 * Standard message response.
 *
 * Attributes
 * ----------
 * message : str
 * The message string.
 */
export type Message = {
    message: string;
};

/**
 * A note belonging to a user.
 *
 * Attributes
 * ----------
 * id : int
 * Primary key.
 * title : str
 * Title of the note.
 * content : str
 * Content of the note.
 * user_id : uuid.UUID
 * Foreign key to the user who owns the note.
 * created_at : datetime
 * Creation timestamp.
 * updated_at : datetime
 * Last update timestamp.
 */
export type Note = {
    id?: number;
    title: string;
    content: string;
    user_id: string;
    created_at?: string;
    updated_at?: string;
};

/**
 * Access token response model.
 *
 * Attributes
 * ----------
 * access_token : str
 * The JWT access token.
 * token_type : str
 * The type of token (default: "bearer").
 */
export type Token = {
    access_token: string;
    token_type?: string;
};

/**
 * Model for updating a user's password.
 *
 * Attributes
 * ----------
 * current_password : str
 * The user's current password.
 * new_password : str
 * The new password to set.
 */
export type UpdatePassword = {
    current_password: string;
    new_password: string;
};

/**
 * Public user model for API responses.
 *
 * Attributes
 * ----------
 * id : uuid.UUID
 * User's unique ID.
 * email : EmailStr
 * User's email address.
 * full_name : str | None
 * Full name of the user.
 * is_active : bool
 * Whether the user is active.
 * is_superuser : bool
 * Whether the user is a superuser.
 * created_at : datetime
 * Creation timestamp.
 * updated_at : datetime
 * Last update timestamp.
 */
export type UserPublic = {
    email: string;
    full_name?: (string | null);
    is_active?: boolean;
    is_superuser?: boolean;
    id: string;
    created_at: string;
    updated_at: string;
};

/**
 * User registration model.
 *
 * Attributes
 * ----------
 * email : EmailStr
 * User's email address.
 * password : str
 * The user's password.
 * full_name : str | None
 * Full name of the user.
 */
export type UserRegister = {
    email: string;
    password: string;
    full_name?: (string | null);
};

/**
 * Paginated list of public users.
 *
 * Attributes
 * ----------
 * data : List[UserPublic]
 * List of user objects.
 * count : int
 * Total number of users.
 */
export type UsersPublic = {
    data: Array<UserPublic>;
    count: number;
};

/**
 * User update model for PATCH/PUT requests.
 *
 * Attributes
 * ----------
 * email : EmailStr | None
 * New email address.
 * full_name : str | None
 * New full name.
 * avatar_url : str | None
 * New avatar URL.
 * phone : str | None
 * New phone number.
 * password : str | None
 * New password.
 * is_active : bool
 * Whether the user is active.
 * is_superuser : bool
 * Whether the user is a superuser.
 */
export type UserUpdate = {
    email?: (string | null);
    full_name?: (string | null);
    avatar_url?: (string | null);
    phone?: (string | null);
    password?: (string | null);
    is_active?: boolean;
    is_superuser?: boolean;
};

export type ValidationError = {
    loc: Array<(string | number)>;
    msg: string;
    type: string;
};

export type LoginLoginAccessTokenData = {
    formData: Body_login_login_access_token;
};

export type LoginLoginAccessTokenResponse = (Token);

export type LoginTestTokenResponse = (UserPublic);

export type NotesReadNotesResponse = (Array<Note>);

export type NotesCreateNoteData = {
    requestBody: Note;
};

export type NotesCreateNoteResponse = (Note);

export type NotesReadNoteData = {
    noteId: number;
};

export type NotesReadNoteResponse = (Note);

export type NotesDeleteNoteData = {
    noteId: number;
};

export type NotesDeleteNoteResponse = (void);

export type UsersReadUserMeResponse = (UserPublic);

export type UsersDeleteUserMeResponse = (Message);

export type UsersUpdateUserMeData = {
    requestBody: UserUpdate;
};

export type UsersUpdateUserMeResponse = (UserPublic);

export type UsersUpdatePasswordData = {
    requestBody: UpdatePassword;
};

export type UsersUpdatePasswordResponse = (Message);

export type UsersReadUserData = {
    userId: string;
};

export type UsersReadUserResponse = (UserPublic);

export type UsersUpdateUserData = {
    requestBody: UserUpdate;
    userId: string;
};

export type UsersUpdateUserResponse = (UserPublic);

export type UsersDeleteUserData = {
    userId: string;
};

export type UsersDeleteUserResponse = (Message);

export type UsersListUsersData = {
    limit?: number;
    skip?: number;
};

export type UsersListUsersResponse = (UsersPublic);

export type UsersFindUserByEmailData = {
    email: string;
};

export type UsersFindUserByEmailResponse = (UserPublic);

export type UsersRegisterUserData = {
    requestBody: UserRegister;
};

export type UsersRegisterUserResponse = (UserPublic);