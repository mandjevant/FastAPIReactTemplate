// This file is auto-generated by @hey-api/openapi-ts

import type { CancelablePromise } from './core/CancelablePromise';
import { OpenAPI } from './core/OpenAPI';
import { request as __request } from './core/request';
import type { LoginLoginAccessTokenData, LoginLoginAccessTokenResponse, LoginTestTokenResponse, NotesReadNotesResponse, NotesCreateNoteData, NotesCreateNoteResponse, NotesReadNoteData, NotesReadNoteResponse, NotesDeleteNoteData, NotesDeleteNoteResponse, UsersReadUserMeResponse, UsersDeleteUserMeResponse, UsersUpdateUserMeData, UsersUpdateUserMeResponse, UsersUpdatePasswordData, UsersUpdatePasswordResponse, UsersReadUserData, UsersReadUserResponse, UsersUpdateUserData, UsersUpdateUserResponse, UsersDeleteUserData, UsersDeleteUserResponse, UsersListUsersData, UsersListUsersResponse, UsersFindUserByEmailData, UsersFindUserByEmailResponse, UsersRegisterUserData, UsersRegisterUserResponse } from './types.gen';

export class LoginService {
    /**
     * Login Access Token
     * OAuth2 compatible token login, get an access token for future requests.
     *
     * Parameters
     * ----------
     * db : Session
     * Database session.
     * form_data : OAuth2PasswordRequestForm
     * The login form data.
     *
     * Returns
     * -------
     * Token
     * The access token.
     *
     * Raises
     * ------
     * HTTPException
     * If credentials are invalid or user is inactive.
     * @param data The data for the request.
     * @param data.formData
     * @returns Token Successful Response
     * @throws ApiError
     */
    public static loginAccessToken(data: LoginLoginAccessTokenData): CancelablePromise<LoginLoginAccessTokenResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/login/access-token',
            formData: data.formData,
            mediaType: 'application/x-www-form-urlencoded',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Test Token
     * Test access token.
     *
     * Parameters
     * ----------
     * current_user : User
     * The current authenticated user.
     *
     * Returns
     * -------
     * UserPublic
     * The user's public info if token is valid.
     * @returns UserPublic Successful Response
     * @throws ApiError
     */
    public static testToken(): CancelablePromise<LoginTestTokenResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/login/test-token'
        });
    }
    
}

export class NotesService {
    /**
     * Read Notes
     * Get all notes for the current user.
     *
     * Parameters
     * ----------
     * db : Session
     * Database session.
     * current_user : User
     * The authenticated user.
     *
     * Returns
     * -------
     * List[Note]
     * List of notes for the user.
     * @returns Note Successful Response
     * @throws ApiError
     */
    public static readNotes(): CancelablePromise<NotesReadNotesResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/notes/'
        });
    }
    
    /**
     * Create Note
     * Create a new note for the current user.
     *
     * Parameters
     * ----------
     * note : Note
     * The note data from the request body.
     * db : Session
     * Database session.
     * current_user : User
     * The authenticated user.
     *
     * Returns
     * -------
     * Note
     * The created note.
     * @param data The data for the request.
     * @param data.requestBody
     * @returns Note Successful Response
     * @throws ApiError
     */
    public static createNote(data: NotesCreateNoteData): CancelablePromise<NotesCreateNoteResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/notes/',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Read Note
     * Get a single note by id for the current user.
     *
     * Parameters
     * ----------
     * note_id : int
     * The note's primary key.
     * db : Session
     * Database session.
     * current_user : User
     * The authenticated user.
     *
     * Returns
     * -------
     * Note
     * The note if found.
     *
     * Raises
     * ------
     * HTTPException
     * If the note is not found.
     * @param data The data for the request.
     * @param data.noteId
     * @returns Note Successful Response
     * @throws ApiError
     */
    public static readNote(data: NotesReadNoteData): CancelablePromise<NotesReadNoteResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/notes/{note_id}',
            path: {
                note_id: data.noteId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Delete Note
     * Delete a note by id for the current user.
     *
     * Parameters
     * ----------
     * note_id : int
     * The note's primary key.
     * db : Session
     * Database session.
     * current_user : User
     * The authenticated user.
     *
     * Raises
     * ------
     * HTTPException
     * If the note is not found.
     * @param data The data for the request.
     * @param data.noteId
     * @returns void Successful Response
     * @throws ApiError
     */
    public static deleteNote(data: NotesDeleteNoteData): CancelablePromise<NotesDeleteNoteResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/api/v1/notes/{note_id}',
            path: {
                note_id: data.noteId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
}

export class UsersService {
    /**
     * Read User Me
     * Get the current authenticated user's public info.
     *
     * Parameters
     * ----------
     * current_user : User
     * The current authenticated user.
     *
     * Returns
     * -------
     * UserPublic
     * The user's public info.
     * @returns UserPublic Successful Response
     * @throws ApiError
     */
    public static readUserMe(): CancelablePromise<UsersReadUserMeResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/users/me',
            errors: {
                404: 'Not found',
                500: 'Internal server error'
            }
        });
    }
    
    /**
     * Delete User Me
     * Delete the current authenticated user.
     *
     * Parameters
     * ----------
     * db : Session
     * Database session.
     * current_user : User
     * The current authenticated user.
     *
     * Returns
     * -------
     * Message
     * Success or failure message.
     * @returns Message Successful Response
     * @throws ApiError
     */
    public static deleteUserMe(): CancelablePromise<UsersDeleteUserMeResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/api/v1/users/me',
            errors: {
                404: 'Not found',
                500: 'Internal server error'
            }
        });
    }
    
    /**
     * Update User Me
     * Update the current authenticated user's info.
     *
     * Parameters
     * ----------
     * db : Session
     * Database session.
     * user_update : UserUpdate
     * Update data for the user.
     * current_user : User
     * The current authenticated user.
     *
     * Returns
     * -------
     * UserPublic
     * The updated user's public info.
     * @param data The data for the request.
     * @param data.requestBody
     * @returns UserPublic Successful Response
     * @throws ApiError
     */
    public static updateUserMe(data: UsersUpdateUserMeData): CancelablePromise<UsersUpdateUserMeResponse> {
        return __request(OpenAPI, {
            method: 'PATCH',
            url: '/api/v1/users/me',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                404: 'Not found',
                422: 'Validation Error',
                500: 'Internal server error'
            }
        });
    }
    
    /**
     * Update Password
     * @param data The data for the request.
     * @param data.requestBody
     * @returns Message Successful Response
     * @throws ApiError
     */
    public static updatePassword(data: UsersUpdatePasswordData): CancelablePromise<UsersUpdatePasswordResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/users/me/password',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                404: 'Not found',
                422: 'Validation Error',
                500: 'Internal server error'
            }
        });
    }
    
    /**
     * Read User
     * @param data The data for the request.
     * @param data.userId
     * @returns UserPublic Successful Response
     * @throws ApiError
     */
    public static readUser(data: UsersReadUserData): CancelablePromise<UsersReadUserResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/users/{user_id}',
            path: {
                user_id: data.userId
            },
            errors: {
                404: 'Not found',
                422: 'Validation Error',
                500: 'Internal server error'
            }
        });
    }
    
    /**
     * Update User
     * Update a user by ID (admin/superuser only).
     *
     * Parameters
     * ----------
     * db : Session
     * Database session.
     * user_id : uuid.UUID
     * The user's unique ID.
     * user_in : UserUpdate
     * Update data for the user.
     * current_superuser : User
     * The current authenticated superuser.
     *
     * Returns
     * -------
     * UserPublic
     * The updated user's public info.
     *
     * Raises
     * ------
     * HTTPException
     * If the user does not exist or email is already taken.
     * @param data The data for the request.
     * @param data.userId
     * @param data.requestBody
     * @returns UserPublic Successful Response
     * @throws ApiError
     */
    public static updateUser(data: UsersUpdateUserData): CancelablePromise<UsersUpdateUserResponse> {
        return __request(OpenAPI, {
            method: 'PATCH',
            url: '/api/v1/users/{user_id}',
            path: {
                user_id: data.userId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                404: 'Not found',
                422: 'Validation Error',
                500: 'Internal server error'
            }
        });
    }
    
    /**
     * Delete User
     * Delete a user by ID (admin/superuser only).
     *
     * Parameters
     * ----------
     * db : Session
     * Database session.
     * user_id : uuid.UUID
     * The user's unique ID.
     * current_user : User
     * The current authenticated user.
     *
     * Returns
     * -------
     * Message
     * Success or failure message.
     *
     * Raises
     * ------
     * HTTPException
     * If the user does not exist or tries to delete themselves.
     * @param data The data for the request.
     * @param data.userId
     * @returns Message Successful Response
     * @throws ApiError
     */
    public static deleteUser(data: UsersDeleteUserData): CancelablePromise<UsersDeleteUserResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/api/v1/users/{user_id}',
            path: {
                user_id: data.userId
            },
            errors: {
                404: 'Not found',
                422: 'Validation Error',
                500: 'Internal server error'
            }
        });
    }
    
    /**
     * List Users
     * @param data The data for the request.
     * @param data.skip
     * @param data.limit
     * @returns UsersPublic Successful Response
     * @throws ApiError
     */
    public static listUsers(data: UsersListUsersData = {}): CancelablePromise<UsersListUsersResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/users/',
            query: {
                skip: data.skip,
                limit: data.limit
            },
            errors: {
                404: 'Not found',
                422: 'Validation Error',
                500: 'Internal server error'
            }
        });
    }
    
    /**
     * Find User By Email
     * @param data The data for the request.
     * @param data.email
     * @returns UserPublic Successful Response
     * @throws ApiError
     */
    public static findUserByEmail(data: UsersFindUserByEmailData): CancelablePromise<UsersFindUserByEmailResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/users/find/{email}',
            path: {
                email: data.email
            },
            errors: {
                404: 'Not found',
                422: 'Validation Error',
                500: 'Internal server error'
            }
        });
    }
    
    /**
     * Register User
     * Register a new user account.
     *
     * Parameters
     * ----------
     * db : Session
     * Database session.
     * user_in : UserRegister
     * Registration data for the new user.
     *
     * Returns
     * -------
     * UserPublic
     * The created user's public info.
     *
     * Raises
     * ------
     * HTTPException
     * If a user with the given email already exists.
     * @param data The data for the request.
     * @param data.requestBody
     * @returns UserPublic Successful Response
     * @throws ApiError
     */
    public static registerUser(data: UsersRegisterUserData): CancelablePromise<UsersRegisterUserResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/users/signup',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                404: 'Not found',
                422: 'Validation Error',
                500: 'Internal server error'
            }
        });
    }
    
}